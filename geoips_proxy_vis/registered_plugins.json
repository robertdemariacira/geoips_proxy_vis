{
    "text_based": {},
    "yaml_based": {
        "product_defaults": {
            "89-PCT-Test": {
                "docstring": "The default product_defaults_source_name plugin configuration.\n",
                "family": "interpolator_algorithm_colormapper",
                "interface": "product_defaults",
                "package": "geoips_proxy_vis",
                "plugin_type": "yaml_based",
                "relpath": "plugins/yaml/product_defaults/89_PCT_Test.yaml"
            }
        },
        "products": {
            "amsr2": {
                "89-PCT-Fully-Specified": {
                    "docstring": "The amsr2_fully_specified implementation of 89 MHz Polarization Corrected\nBrightness Temperature.\n",
                    "family": "interpolator_algorithm_colormapper",
                    "interface": "products",
                    "package": "geoips_proxy_vis",
                    "plugin_type": "yaml_based",
                    "product_defaults": null,
                    "source_names": [
                        "amsr2"
                    ],
                    "relpath": "plugins/yaml/products/amsr2_fully_specified.yaml"
                },
                "89-PCT-Using-Product-Defaults": {
                    "docstring": "89 MHz Polarization Corrected Brightness Temperature implementation\nusing the 89-PCT-Test product defaults in the product definition.\n",
                    "family": null,
                    "interface": "products",
                    "package": "geoips_proxy_vis",
                    "plugin_type": "yaml_based",
                    "product_defaults": "89-PCT-Test",
                    "source_names": [
                        "amsr2"
                    ],
                    "relpath": "plugins/yaml/products/amsr2_using_product_defaults.yaml"
                }
            },
            "abi": {
                "g16_geo_proxy_vis": {
                    "docstring": "GeoProxyVis\n",
                    "family": "algorithm",
                    "interface": "products",
                    "package": "geoips_proxy_vis",
                    "plugin_type": "yaml_based",
                    "product_defaults": null,
                    "source_names": [
                        "abi"
                    ],
                    "relpath": "plugins/yaml/products/geo_proxy_vis_fully_specified.yaml"
                }
            }
        }
    },
    "module_based": {
        "algorithms": {
            "pmw_89test": {
                "docstring": "Sample algorithm plugin, duplicate of \"89pct\".\n\nDuplicate of Passive Microwave 89 GHz Polarization Corrected Temperature.\nData manipulation steps for the \"89test\" product, duplicate of \"89pct\".\nThis algorithm expects Brightness Temperatures in units of degrees Kelvin\n",
                "family": "xarray_to_xarray",
                "interface": "algorithms",
                "package": "geoips_proxy_vis",
                "plugin_type": "module_based",
                "signature": "(xobj, variables, product_name, output_data_range, min_outbounds='crop', max_outbounds='mask', norm=False, inverse=False)",
                "relpath": "plugins/modules/algorithms/pmw_89test.py"
            },
            "geo_proxy_vis": {
                "docstring": "Empty plugin.",
                "family": "xarray_dict_to_xarray_dict",
                "interface": "algorithms",
                "package": "geoips_proxy_vis",
                "plugin_type": "module_based",
                "signature": "(xarray_dict: Dict[str, Dict[str, Any]], vis_channel_name: str, ir_channels_to_pvis_args: Dict[str, str], satellite: str, minutes_interval: int, res_2km_name: str = '2km', res_0p5km_name='0.5km', lon_name='longitude', lat_name='latitude', pvis_alg='nighttime_pvis_main_two_eq', dvis_alg='vis_disp_sza', use_saved_params=True, output_res='0.5km')",
                "relpath": "plugins/modules/algorithms/geo_proxy_vis.py"
            }
        },
        "readers": {
            "generic_satpy": {
                "docstring": "Generic satpy reader",
                "family": "standard",
                "interface": "readers",
                "package": "geoips_proxy_vis",
                "plugin_type": "module_based",
                "signature": "(fnames: List[str], start_time_meta_path: str, end_time_meta_path: str, source_name: str, platform_name: str, metadata_only: bool = False, chans: Optional[List[str]] = None, area_def: Optional[pyresample.geometry.AreaDefinition] = None, self_register: bool = False, satpy_reader: str = 'ahi_hsd', channel_groups: Dict[str, List[str]] = {'0.5km': ['B09']}, roi: float = 3000, filter_parameters: Optional[Dict[str, Any]] = None, satpy_reader_kwargs: Optional[Dict[str, Any]] = None, calibration: Union[List[str], str] = '*', resolution: Union[List[float], float] = '*', polarization: Union[List[str], str] = '*', level: Union[List[float], str] = '*', modifiers: Union[List[str], str] = '*', generate: bool = True, unload: bool = True, load_kwargs: Optional[Dict[str, Any]] = None, force_compute: bool = False) -> Dict[str, xarray.core.dataarray.DataArray]",
                "relpath": "plugins/modules/readers/generic_satpy.py"
            }
        },
        "output_formatters": {
            "satpy_tiles_formatter": {
                "docstring": null,
                "family": "xrdict_area_product_to_outlist",
                "interface": "output_formatters",
                "package": "geoips_proxy_vis",
                "plugin_type": "module_based",
                "signature": "(xarray_dict, area_def, product_name)",
                "relpath": "plugins/modules/output_formatters/satpy_tiles_formatter.py"
            }
        }
    }
}